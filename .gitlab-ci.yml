# image: docker:stable
# variables:
#   IMAGE_NAME: ${CI_REGISTRY}/${CI_PROJECT_PATH}

# stages:     
#   - build
#   - vul-scan
#   - push


# construction:      
#   stage: build
#   before_script:
#   - set 
#   script:
#     - docker image build -t ${IMAGE_NAME}:build-temp .
    

# push:
#   stage: push
#   script:
#     - docker image tag ${IMAGE_NAME}:build-temp ${IMAGE_NAME}:${CI_COMMIT_TAG:-devel}
#     - echo ${CI_REGISTRY_PASSWORD} |  docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
#     - docker image push  ${IMAGE_NAME}:${CI_COMMIT_TAG:-devel}
#     - docker logout
#   after_script:
#     - docker image rm ${IMAGE_NAME}:build-temp ${IMAGE_NAME}:${CI_COMMIT_TAG:-devel}

# scan de vulérabilite:
#   stage: vul-scan
#   script:
# # On s'assure que le dossier de rapport existe
#   - mkdir -p -m 2770 ./scan-result

# # Lancement du scan
#   - docker container run --rm -v /var/run/docker.sock:/var/run/docker.sock -v trivy-cache:/root/.cache/ aquasec/trivy --cache-dir /root/.cache/  image --scanners vuln --no-progress ${IMAGE_NAME}:build-temp | tee ./scan-result/scan-${CI_PROJECT_NAME}.log

# # Inspection du rapport pour contorle si il y a des VULN et le cas échéant si on doit ou pas s'arrêter

#   - |
#     grep -q "CRITICAL: [^0]" ./scan-result/scan-${CI_PROJECT_NAME}.log && if [ ${STOP_IF_VULNERABILITY_FOUND:-0} != 0 ] ; then  echo "Vulnérabilité CRITICAL détectée, arrêt du pipeline" && exit 1  ; fi 

#   artifacts:
#     when: always
#     paths:
#     - ./scan-result/
#     expire_in: 1 week


image: docker:stable
variables:
  IMAGE_NAME: ${CI_REGISTRY}/${CI_PROJECT_PATH}

stages:     
  - build
  - vul-scan
  - push


construction:      
  stage: build
  before_script:
  - set 
  script:
    - docker image build -t ${IMAGE_NAME}:build-temp .
    

push:
  stage: push
  script:
    - docker image tag ${IMAGE_NAME}:build-temp ${IMAGE_NAME}:${CI_COMMIT_TAG:-devel}
    - echo ${CI_REGISTRY_PASSWORD} |  docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin
    - docker image push  ${IMAGE_NAME}:${CI_COMMIT_TAG:-devel}
    - docker logout
  after_script:
    - docker image rm ${IMAGE_NAME}:build-temp ${IMAGE_NAME}:${CI_COMMIT_TAG:-devel}

vul-scan:  # renommé "vul-scan" au lieu de "scan de vulnérabilité"
  stage: vul-scan
  script:
    # On s'assure que le dossier de rapport existe
    - mkdir -p -m 2770 ./scan-result

    # Lancement du scan
    - docker container run --rm -v /var/run/docker.sock:/var/run/docker.sock -v trivy-cache:/root/.cache/ aquasec/trivy --cache-dir /root/.cache/  image --scanners vuln --no-progress ${IMAGE_NAME}:build-temp | tee ./scan-result/scan-${CI_PROJECT_NAME}.log

    # Inspection du rapport pour contorle si il y a des VULN et le cas échéant si on doit ou pas s'arrêter
    - |
      grep -q "CRITICAL: [^0]" ./scan-result/scan-${CI_PROJECT_NAME}.log && if [ ${STOP_IF_VULNERABILITY_FOUND:-0} != 0 ] ; then  echo "Vulnérabilité CRITICAL détectée, arrêt du pipeline" && exit 1  ; fi ; true

  artifacts:
    when: always
    paths:
    - ./scan-result/
    expire_in: 1 week
